#!/usr/bin/env python
# Kinect configuration

PACKAGE = 'flir_lepton_image_processing'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Example : gen.add("int_param", int_t, 0,    "An In.....", 50, 0,  100)
#                    name        type   level  description  def min max

#-------------------------- show the thermal image -------------------------------
gen.add("show_thermal_image", bool_t, 0,"", False)

gen.add("detection_method", int_t, 1, "0 for binary image-1 for sensor/Image", 0, 0, 1)
#-------------- Low and High accepted Temperatures ---------------------
gen.add("low_temperature", double_t, 0, "Used when detection method is 0", 27, 20, 80)
gen.add("high_temperature", double_t, 0, "Used when detection method is 0", 70, 20, 80)

#-------------------------- Edge detection method ------------------------------
dirm = gen.enum([
  gen.const("Canny_edge_detector", int_t, 0,""),
  gen.const("Scharr_edge_detector", int_t, 1,""),
  gen.const("Sobel_edge_detector", int_t, 2,""),
  gen.const("Laplacian_edge_detector", int_t, 3,""),
  gen.const("Mixed_edge_detector", int_t, 4,"")], "")

gen.add("edge_detection_method", int_t, 0, "", 0, 0, 4, edit_method=dirm)

#--------------------------- canny parameters ----------------------------------
gen.add("canny_ratio", int_t, 0,"", 3, 0, 10)
gen.add("canny_kernel_size", int_t, 0,"", 3, 1, 10)
gen.add("canny_low_threshold", int_t, 0,"", 10, 1, 255)
gen.add("canny_blur_noise_kernel_size", int_t, 0,"", 3, 1, 10)

gen.add("contrast_enhance_beta", int_t, 0,"", 2, 1, 10)
gen.add("contrast_enhance_alpha", int_t, 0,"", 2, 1, 10)

#-------------------------- Threshold parameters -------------------------------
gen.add("denoised_edges_threshold", int_t, 0,"", 130, 0, 255)

#------------------------- Blob detection parameters ---------------------------

gen.add("min_threshold", int_t, 0,"", 0, 0, 5000)
gen.add("max_threshold", int_t, 0,"", 200, 0, 5000)
gen.add("threshold_step", int_t, 0,"", 100, 1, 100)
gen.add("min_area", int_t, 0,"", 100, 1, 1000000)
gen.add("max_area", int_t, 0,"", 181000, 1, 302700)
gen.add("min_convexity", double_t, 0,"", 0.0, 0.0, 100.0)
gen.add("max_convexity", double_t, 0,"", 100.0, 0.0, 100.0)
gen.add("min_inertia_ratio", double_t, 0,"", 0.0, 0.0, 100.0)
gen.add("max_circularity", double_t, 0,"", 1.0, 0.0, 1.0)
gen.add("min_circularity", double_t, 0,"", 0.0, 0.0, 1.0)
gen.add("filter_by_color", bool_t, 0,"", False)
gen.add("filter_by_circularity", bool_t, 0,"", True)

#------------------------- Bounding boxes parameters ---------------------------

odm = gen.enum([
  gen.const("Brushfire_bounding_box_detection", int_t, 0,""),
  gen.const("Raycast_bounding_box_detection", int_t, 1,"")],
   "")

gen.add("outline_detection_method", int_t, 0, "", 0, 0, 1, edit_method=odm)

gen.add("raycast_keypoint_partitions", int_t, 0, "", 32, 0, 128)

#----------------------- Loose ends connection parameters ----------------------

gen.add("AB_to_MO_ratio", int_t, 0, "", 4, 0, 10)
gen.add("minimum_curve_points", int_t, 0, "", 50, 0, 1000)


#--------------------- Scaling from 32FC1 to 8UC1 parameters -------------------

gen.add("scale_method", int_t, 0, "", 0, 0, 1)

#------------------------------- Debug -----------------------------------------

gen.add("show_find_rois", bool_t, 0,"", False)
gen.add("show_find_rois_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_denoise_edges", bool_t, 0,"", False)
gen.add("show_denoise_edges_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_connect_pairs", bool_t, 0,"", False)
gen.add("show_connect_pairs_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_get_shapes_clear_border", bool_t, 0,"", False)
gen.add("show_get_shapes_clear_border_size", int_t, 0,"", 1200, 0, 3000)

#---------------------- Probability extraction Parameters ----------------------

gen.add("probability_method", int_t, 0,"", 1, 0, 1)
gen.add("min_thermal_probability", double_t, 0,"Min thermal's probabability", 0.2, 0, 1)

#------------------ Gaussian Function-----------------------
gen.add("optimal_temperature", double_t, 0,"Gaussian_Probability", 37, 20, 50)
gen.add("tolerance", double_t, 0,"Gaussian_Probability", 10, 0, 25)

#------------------ Logistic Function ----------------------
gen.add("low_acceptable_temperature", double_t, 0,"Logistic_Probability", 27, 20, 80)
gen.add("high_acceptable_temperature", double_t, 0,"Logistic_Probability", 70, 20, 80)

#------------------ Tolerance right and left ---------------------------------
gen.add("left_tolerance", double_t, 0,"Logistic_Probability- Big value means small tolerance", 4, 1, 10)
gen.add("right_tolerance", double_t, 0,"Logistic_Probability- Big value means small tolerance", 8, 1, 10)

exit(gen.generate(PACKAGE, "flir_lepton_image_processing", "thermal_cfg"))
