// Generated by gencpp from file flir_lepton_msgs/CandidateRoiMsg.msg
// DO NOT EDIT!


#ifndef FLIR_LEPTON_MSGS_MESSAGE_CANDIDATEROIMSG_H
#define FLIR_LEPTON_MSGS_MESSAGE_CANDIDATEROIMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace flir_lepton_msgs
{
template <class ContainerAllocator>
struct CandidateRoiMsg_
{
  typedef CandidateRoiMsg_<ContainerAllocator> Type;

  CandidateRoiMsg_()
    : header()
    , keypointX(0.0)
    , keypointY(0.0)
    , verticesX()
    , verticesY()
    , outlineX()
    , outlineY()  {
    }
  CandidateRoiMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , keypointX(0.0)
    , keypointY(0.0)
    , verticesX(_alloc)
    , verticesY(_alloc)
    , outlineX(_alloc)
    , outlineY(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _keypointX_type;
  _keypointX_type keypointX;

   typedef float _keypointY_type;
  _keypointY_type keypointY;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _verticesX_type;
  _verticesX_type verticesX;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _verticesY_type;
  _verticesY_type verticesY;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _outlineX_type;
  _outlineX_type outlineX;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _outlineY_type;
  _outlineY_type outlineY;





  typedef boost::shared_ptr< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CandidateRoiMsg_

typedef ::flir_lepton_msgs::CandidateRoiMsg_<std::allocator<void> > CandidateRoiMsg;

typedef boost::shared_ptr< ::flir_lepton_msgs::CandidateRoiMsg > CandidateRoiMsgPtr;
typedef boost::shared_ptr< ::flir_lepton_msgs::CandidateRoiMsg const> CandidateRoiMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator1> & lhs, const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.keypointX == rhs.keypointX &&
    lhs.keypointY == rhs.keypointY &&
    lhs.verticesX == rhs.verticesX &&
    lhs.verticesY == rhs.verticesY &&
    lhs.outlineX == rhs.outlineX &&
    lhs.outlineY == rhs.outlineY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator1> & lhs, const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flir_lepton_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb941ceeae2a537fa35424da91cbf0b9";
  }

  static const char* value(const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb941ceeae2a537fULL;
  static const uint64_t static_value2 = 0xa35424da91cbf0b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flir_lepton_msgs/CandidateRoiMsg";
  }

  static const char* value(const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# keypoint.pt.x\n"
"float32 keypointX\n"
"\n"
"# keypoint.pt.y\n"
"float32 keypointY\n"
"\n"
"# bounding box's vertices X coordinate\n"
"float32[] verticesX\n"
"\n"
"# bounding box's vertices Y coordinate\n"
"float32[] verticesY\n"
"\n"
"# blob's outline points X coordinate\n"
"float32[] outlineX\n"
"\n"
"# blob's outline points X coordinate\n"
"float32[] outlineY\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.keypointX);
      stream.next(m.keypointY);
      stream.next(m.verticesX);
      stream.next(m.verticesY);
      stream.next(m.outlineX);
      stream.next(m.outlineY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CandidateRoiMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flir_lepton_msgs::CandidateRoiMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "keypointX: ";
    Printer<float>::stream(s, indent + "  ", v.keypointX);
    s << indent << "keypointY: ";
    Printer<float>::stream(s, indent + "  ", v.keypointY);
    s << indent << "verticesX[]" << std::endl;
    for (size_t i = 0; i < v.verticesX.size(); ++i)
    {
      s << indent << "  verticesX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.verticesX[i]);
    }
    s << indent << "verticesY[]" << std::endl;
    for (size_t i = 0; i < v.verticesY.size(); ++i)
    {
      s << indent << "  verticesY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.verticesY[i]);
    }
    s << indent << "outlineX[]" << std::endl;
    for (size_t i = 0; i < v.outlineX.size(); ++i)
    {
      s << indent << "  outlineX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.outlineX[i]);
    }
    s << indent << "outlineY[]" << std::endl;
    for (size_t i = 0; i < v.outlineY.size(); ++i)
    {
      s << indent << "  outlineY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.outlineY[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLIR_LEPTON_MSGS_MESSAGE_CANDIDATEROIMSG_H
