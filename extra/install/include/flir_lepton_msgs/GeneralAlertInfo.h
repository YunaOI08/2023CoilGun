// Generated by gencpp from file flir_lepton_msgs/GeneralAlertInfo.msg
// DO NOT EDIT!


#ifndef FLIR_LEPTON_MSGS_MESSAGE_GENERALALERTINFO_H
#define FLIR_LEPTON_MSGS_MESSAGE_GENERALALERTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flir_lepton_msgs
{
template <class ContainerAllocator>
struct GeneralAlertInfo_
{
  typedef GeneralAlertInfo_<ContainerAllocator> Type;

  GeneralAlertInfo_()
    : yaw(0.0)
    , pitch(0.0)
    , probability(0.0)  {
    }
  GeneralAlertInfo_(const ContainerAllocator& _alloc)
    : yaw(0.0)
    , pitch(0.0)
    , probability(0.0)  {
  (void)_alloc;
    }



   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef float _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GeneralAlertInfo_

typedef ::flir_lepton_msgs::GeneralAlertInfo_<std::allocator<void> > GeneralAlertInfo;

typedef boost::shared_ptr< ::flir_lepton_msgs::GeneralAlertInfo > GeneralAlertInfoPtr;
typedef boost::shared_ptr< ::flir_lepton_msgs::GeneralAlertInfo const> GeneralAlertInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator1> & lhs, const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator2> & rhs)
{
  return lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.probability == rhs.probability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator1> & lhs, const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flir_lepton_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2bdae7028685c84899b21b0cb8b7155";
  }

  static const char* value(const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2bdae7028685c84ULL;
  static const uint64_t static_value2 = 0x899b21b0cb8b7155ULL;
};

template<class ContainerAllocator>
struct DataType< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flir_lepton_msgs/GeneralAlertInfo";
  }

  static const char* value(const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 yaw\n"
"float64 pitch\n"
"float32 probability\n"
;
  }

  static const char* value(const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeneralAlertInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator>& v)
  {
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLIR_LEPTON_MSGS_MESSAGE_GENERALALERTINFO_H
