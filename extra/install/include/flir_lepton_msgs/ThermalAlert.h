// Generated by gencpp from file flir_lepton_msgs/ThermalAlert.msg
// DO NOT EDIT!


#ifndef FLIR_LEPTON_MSGS_MESSAGE_THERMALALERT_H
#define FLIR_LEPTON_MSGS_MESSAGE_THERMALALERT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flir_lepton_msgs/GeneralAlertInfo.h>

namespace flir_lepton_msgs
{
template <class ContainerAllocator>
struct ThermalAlert_
{
  typedef ThermalAlert_<ContainerAllocator> Type;

  ThermalAlert_()
    : info()
    , temperature(0.0)  {
    }
  ThermalAlert_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef float _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> const> ConstPtr;

}; // struct ThermalAlert_

typedef ::flir_lepton_msgs::ThermalAlert_<std::allocator<void> > ThermalAlert;

typedef boost::shared_ptr< ::flir_lepton_msgs::ThermalAlert > ThermalAlertPtr;
typedef boost::shared_ptr< ::flir_lepton_msgs::ThermalAlert const> ThermalAlertConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator1> & lhs, const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator1> & lhs, const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flir_lepton_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18245e1dc2e3ca98fa29f3888f3602b3";
  }

  static const char* value(const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18245e1dc2e3ca98ULL;
  static const uint64_t static_value2 = 0xfa29f3888f3602b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flir_lepton_msgs/ThermalAlert";
  }

  static const char* value(const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GeneralAlertInfo info\n"
"\n"
"float32 temperature\n"
"\n"
"================================================================================\n"
"MSG: flir_lepton_msgs/GeneralAlertInfo\n"
"float64 yaw\n"
"float64 pitch\n"
"float32 probability\n"
;
  }

  static const char* value(const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThermalAlert_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flir_lepton_msgs::ThermalAlert_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::flir_lepton_msgs::GeneralAlertInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLIR_LEPTON_MSGS_MESSAGE_THERMALALERT_H
